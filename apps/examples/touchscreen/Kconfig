#
# For a description of the syntax of this configuration file,
# see misc/tools/kconfig-language.txt.
#

config EXAMPLES_TOUCHSCREEN
	bool "Touchscreen example"
	default n
	---help---
		Enable the touchscreen example

if EXAMPLES_TOUCHSCREEN

config EXAMPLES_TOUCHSCREEN_MINOR
	int "Touchscreen minor device number"
	default 0
	---help---
		The minor device number.  Minor=N corresponds to touchscreen device
		/dev/inputN.  Note this value must with EXAMPLES_TOUCHSCREEN_DEVPATH.
		Default 0.

config EXAMPLES_TOUCHSCREEN_DEVPATH
	string "Touchscreen device path"
	default "/dev/input0"
	---help---
		The path to the touchscreen device.  This must be consistent with
		EXAMPLES_TOUCHSCREEN_MINOR. Default: "/dev/input0"

config EXAMPLES_TOUCHSCREEN_NSAMPLES
	int "Number of samples"
	default 0
	depends on !NSH_BUILTIN_APPS
	---help---
		If NSH_BUILTIN_APPS is defined, then the number of touchscreen
		samples is provided on the command line and this value is ignored.
		Otherwise, this number of samples is collected and the program
		terminates.  Default:  Zero (Samples are collected indefinitely).

config EXAMPLES_TOUCHSCREEN_MOUSE
	bool "Mouse interface"
	default n
	---help---
		The touchscreen test can also be configured to work with a mouse
		driver by setting this option.

config EXAMPLES_TOUCHSCREEN_ARCHINIT
	bool "Architecture-specific initialization"
	default y
	depends on !BUILD_PROTECTED && !BUILD_KERNEL
	---help---
		By default, the touchscreen example will call arch_tcinitialize() to
		register the touchscreen device before it attempts to open it.
		Similarly, it will call arch_tcuninitialize() to unregister the
		touchscreen device when it is finished.

		This works well for the typical touchscreen controller but there are
		other devices that cannot be initialized and uninitialized in this
		fashion.  Consider a USB mouse, for example.  The USB mouse will be
		registered when the mouse is connected and unregistered when the
		mouse is disconnected.

		So, in cases like this, there are two options:  (1) provide dummy
		arch_tcinitialize() and arch_tcuninitialize() just to satisfy the
		linking requirements or, (2) select this option.  if this option is
		de-selected, then the arch_tcinitialize() and arch_tcuninitialize() will
		never be called.

		NOTE also that the functions arch_tcinitialize() and
		arch_tcuninitialize() are effective non-standard operating system
		calls.  This is cheap shortcut and a violation of the OS interface.
		You can get away with this in the flat build (CONFIG_BUILD_FLAT),
		but not in the protected or kernel builds (CONFIG_BUILD_PROTECTED
		or CONFIG)BUILD_KERNEL).  In those cases, you will need to perform
		one-time touchscreen initialization in board_initialize().

endif
